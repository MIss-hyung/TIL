첫 스케치 : 웹 서버와 같이 대규모 프로그램을 개발하는데 적합한 언어를 만들고 싶어서.
2020년 1.15버전 릴리즈
Go언어는 컨테이너와 클라우드 환경 구축에 없어선 안될 도커(Docker) 및 쿠버네티스(Kubernetes)를 비롯해
이더리움(Ethereum)블록체인의 메인 클라이언트 Geth의 개발에 사용되는등 성능과 안정성 인정받음.

장점 : 

1. 간결한 문법, 빠른 컴파일
    --> C++의 복잡함과 긴 컴파일 시간을 줄일 수 있음.

Go언어는 시스템 프로그래밍에 적합하도록 설계됨, C와 구문 비슷함
키워드는 25개, C(37개), C++(84개)
-> break, default, func, interface, select, case, defer, go, map, struct,
    chan, else, goto, package, switch, const, fallthrough, if, range, type
    continue, for, import, return, var

* Go는 복잡도를 낮추고, 컴파일 속도 향상을 위해 기존에 사용하던 헤더 파일을 정의하는 방식 대신 소스 자체를 패키지화 방식 채택
--> 소스 코드 자체를 패ㅣ지화하여 변경된 부분만 컴파일 함으로써 컴파일 속도를 향상시킴.

* 소스 내에 사용하지 않는 변수나 패키지가 있을 경우 컴파일 시 오류를 발생 함.
* 불필요한 패키지를 가져오기에 따른 지연 시간을 줄이고 사용하지 않는 변수 및 패키지 선언으로 인해
향후에 발생할 수 있는 버그를 줄이고자 함.

2. 풍부한 기능, 유틸리티 제공
    --> 기존 개발자들이 사용하던 IDE에서 쉽게 환경을 구성할 수 있습니다.
    공홈에서 Go언어로 작성된 파일을 컴파일,실행,관리 할 수 있는 go 바이너리를 다운로드하고 
    소수의 환경변수($GOROOT, $GOPATH)를 설정하는 것 만으로 개발환경 구성 가능.
    다운받은 유틸리티 go파일은 Go언어로 작성한 소스파일을 컴파일(build)하여 실행 가능한 바이너리를 
    생성하는 것은 물론, 컴파일 후 바로 실행(run)하는 기능을 제공한다.

    *Go 소스 파일의 형식을 맞춰주는 포맷팅(fmt)
    *사용되는 패키지 리스트업(list)
    *테스트 코드 수행 등 
            ->Go언어로 패키지를 작성 및 사용하기 위한 여러가지 기능을 제공함.

3. 다양한 패키지
    http 패키지, 통신에 필요한 암호화 모듈 ==> 웹 서버 쉽게 구축가능

4. 동시성(Concurrency)
    * Go 언어는 시스템 프로그래밍, 특히 서버 게발용으로 설계되었다.
    * 고루틴 제공 : Go 런타임에서 관리되는 일종유 경량 스레드이며 채널을 통해 고루틴 간의 메시지 전송 매커니즘 제공 
    * 채널 : 
    --> 고루틴과 채널을 화용해 멀티 코어 환경에서 병렬처리를 쉽게 구현할 수 있음.
    * 자체 Go 런타임 스케줄러에 의해 관리됨. OS 스레드에 비해서도 경량임
        --> os스레드를 생성하는데 필요한 메모리가 1MB인 반면, 고루틴은 2KB
    * 일반 스레드와 달리 메모리의 스택 영역을 사용하며 자체 스케줄러에 의해 관리 == 컨텍스트 스위칭 비용 줄임.
        --> 스택 메모리가 부족하면 힙영역까지 확장

5.  에러 처리, 함수 흐름 제어
    기존  C, C++는 흔히 발생하는 에러 케이스를 공통 모듈화 하는 과정에서 상세 정보가 누락되는 일 많았다.
    Go언어에서 함수는 복수 개의 값을 반환할 수 있다. 이를 통해 에러가 발생했을 때 일반적인 리턴과 함께 오류 메시지를 반환 할 수 있고,
    이 기능은 에러처리를 쉽게 함.
    만약) 복수 개의 반환을 통해 에러를 감지하더라도 어떤 에러는 발생할 경우 더 이상 프로세스가 실행되는 것이 의미가 없어질 수 있으며
    이떄 Go 언어는 패닉을 발생시켜 에러 후 종료하는 것을 권고한다.

6. 제약사항
    강력한 언어지만 제네릭(Generic) 같은 일부 기능은 의도적으로 빠짐.
    C를 따랐다고 하지만, 포인터 없음.
    따라서 커널, 장치 드라이버, 임베디드 소프트웨어 같은 저 수준 프로그램엔 적합하지 않다.


정리)
    * 기존 프로그래밍 언어 연구의 성과와 절차 무시
    but) 쉽고 간편하게 
첫 스케치 : 웹 서버와 같이 대규모 프로그램을 개발하는데 적합한 언어를 만들고 싶어서.
2020년 1.15버전 릴리즈
Go언어는 컨테이너와 클라우드 환경 구축에 없어선 안될 도커(Docker) 및 쿠버네티스(Kubernetes)를 비롯해
이더리움(Ethereum)블록체인의 메인 클라이언트 Geth의 개발에 사용되는등 성능과 안정성 인정받음.

장점 : 

1. 간결한 문법, 빠른 컴파일
    --> C++의 복잡함과 긴 컴파일 시간을 줄일 수 있음.

Go언어는 시스템 프로그래밍에 적합하도록 설계됨, C와 구문 비슷함
키워드는 25개, C(37개), C++(84개)
-> break, default, func, interface, select, case, defer, go, map, struct,
    chan, else, goto, package, switch, const, fallthrough, if, range, type
    continue, for, import, return, var

* Go는 복잡도를 낮추고, 컴파일 속도 향상을 위해 기존에 사용하던 헤더 파일을 정의하는 방식 대신 소스 자체를 패키지화 방식 채택
--> 소스 코드 자체를 패ㅣ지화하여 변경된 부분만 컴파일 함으로써 컴파일 속도를 향상시킴.

* 소스 내에 사용하지 않는 변수나 패키지가 있을 경우 컴파일 시 오류를 발생 함.
* 불필요한 패키지를 가져오기에 따른 지연 시간을 줄이고 사용하지 않는 변수 및 패키지 선언으로 인해
향후에 발생할 수 있는 버그를 줄이고자 함.

2. 풍부한 기능, 유틸리티 제공
    --> 기존 개발자들이 사용하던 IDE에서 쉽게 환경을 구성할 수 있습니다.
    공홈에서 Go언어로 작성된 파일을 컴파일,실행,관리 할 수 있는 go 바이너리를 다운로드하고 
    소수의 환경변수($GOROOT, $GOPATH)를 설정하는 것 만으로 개발환경 구성 가능.
    다운받은 유틸리티 go파일은 Go언어로 작성한 소스파일을 컴파일(build)하여 실행 가능한 바이너리를 
    생성하는 것은 물론, 컴파일 후 바로 실행(run)하는 기능을 제공한다.

    *Go 소스 파일의 형식을 맞춰주는 포맷팅(fmt)
    *사용되는 패키지 리스트업(list)
    *테스트 코드 수행 등 
            ->Go언어로 패키지를 작성 및 사용하기 위한 여러가지 기능을 제공함.

3. 다양한 패키지
    http 패키지, 통신에 필요한 암호화 모듈 ==> 웹 서버 쉽게 구축가능

4. 동시성(Concurrency)
    * Go 언어는 시스템 프로그래밍, 특히 서버 게발용으로 설계되었다.
    * 고루틴 제공 : Go 런타임에서 관리되는 일종유 경량 스레드이며 채널을 통해 고루틴 간의 메시지 전송 매커니즘 제공 
    * 채널 : 
    --> 고루틴과 채널을 화용해 멀티 코어 환경에서 병렬처리를 쉽게 구현할 수 있음.
    * 자체 Go 런타임 스케줄러에 의해 관리됨. OS 스레드에 비해서도 경량임
        --> os스레드를 생성하는데 필요한 메모리가 1MB인 반면, 고루틴은 2KB
    * 일반 스레드와 달리 메모리의 스택 영역을 사용하며 자체 스케줄러에 의해 관리 == 컨텍스트 스위칭 비용 줄임.
        --> 스택 메모리가 부족하면 힙영역까지 확장

5.  에러 처리, 함수 흐름 제어
    기존  C, C++는 흔히 발생하는 에러 케이스를 공통 모듈화 하는 과정에서 상세 정보가 누락되는 일 많았다.
    Go언어에서 함수는 복수 개의 값을 반환할 수 있다. 이를 통해 에러가 발생했을 때 일반적인 리턴과 함께 오류 메시지를 반환 할 수 있고,
    이 기능은 에러처리를 쉽게 함.
    만약) 복수 개의 반환을 통해 에러를 감지하더라도 어떤 에러는 발생할 경우 더 이상 프로세스가 실행되는 것이 의미가 없어질 수 있으며
    이떄 Go 언어는 패닉을 발생시켜 에러 후 종료하는 것을 권고한다.

6. 제약사항
    강력한 언어지만 제네릭(Generic) 같은 일부 기능은 의도적으로 빠짐.
    C를 따랐다고 하지만, 포인터 없음.
    따라서 커널, 장치 드라이버, 임베디드 소프트웨어 같은 저 수준 프로그램엔 적합하지 않다.


정리)
    * 기존 프로그래밍 언어 연구의 성과와 절차 무시
    but) 쉽고 간편하게 
