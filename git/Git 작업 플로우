Git 작업 플로우
먼저 터미널에 git을 설치합니다.

linux (Ubuntu) 기준

$ sudo apt install git-all
 

(1) 저장소(Repository) 생성
원하는 폴더 들어간 후

$ git init
 

또는 기존 github에 있는 저장소를 내 로컬로 복제할 수도 있습니다.

$ git clone (git 저장소의 URL)
 
(2) 코드 생성 (in Working directory)
이 예제에서는 README.md 라는 파일에 스트링 문자를 쓰는 코드를 만들겠습니다.

$ echo "Hello, Git!" > README.md
 

확인 >>

$ cat README.md
Hello, Git!
 
(3) Staging 영역에 추가
코드 수정이 완료되면 staging 영역에 추가합니다.

$ git add .
현재 디렉토리에 있는 업데이트 된 파일을 전부 스테이징 영역으로 추가합니다.

 

또는,

$ git add -A
수정된 파일 전부를 스테이징 영역에 추가합니다.

 

$ git status
로 현재 add 내역을 확인할 수 있습니다.

 

(4) Repository에 commit
$ git commit -m "feat: README.md update"
-m 은 메세지의 약자이고, 뒤에 ""안에 공유할 메시지 내용을 적어주시면 됩니다.

 
(5) 원격 저장소에 push, 업데이트 된 내용은 pull
내 local 디렉토리로 부터 원격저장소(Remote repository)로 보내기 위해서는 push 명령어를 사용합니다.

그 전에 원격 저장소와 내 로컬을 연결해야 합니다.

원격 저장소 연결 (github)

$ git remote add origin (원격 저장소 github URL)
origin은 remote repository의 이름이며, 다른 이름으로 설정해도 무방합니다.

 

push

$ git push origin master
origin이라는 원격저장소의 master 브랜치 (브랜치는 뒤에서 설명)에 푸쉬합니다.

 

최근에는 깃헙에서 메인 브랜치이름을 master가 아닌 기본으로 main 으로 해놓았습니다. (필자의 수정날짜는 2021-05-11)

따라서 브랜치를 바꾸고, 바꾼 브랜치로 push 해주시면 됩니다. (브랜치 관련 명령어는 밑에 더 나옵니다.)

$ git branch -M main
$ git push origin main
 

 

pull

또한 다른 사람이 원격 저장소(Remote repository)에 업데이트한 파일이 있을 때, 원격저장소와 내 로컬저장소의 상태를 동일하게 만들기 위해 pull을 이용합니다.

$ git pull